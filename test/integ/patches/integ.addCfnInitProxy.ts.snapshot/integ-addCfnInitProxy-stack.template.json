{
 "Resources": {
  "TestVpcE77CE678": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc"
     }
    ]
   }
  },
  "TestVpcPublicSubnet1SubnetA7DB1EDF": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPublicSubnet1RouteTable4CBFF871": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPublicSubnet1RouteTableAssociation7D1DECD9": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestVpcPublicSubnet1RouteTable4CBFF871"
    },
    "SubnetId": {
     "Ref": "TestVpcPublicSubnet1SubnetA7DB1EDF"
    }
   }
  },
  "TestVpcPublicSubnet1DefaultRoute6C0F0315": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "TestVpcIGW9DD53F70"
    },
    "RouteTableId": {
     "Ref": "TestVpcPublicSubnet1RouteTable4CBFF871"
    }
   },
   "DependsOn": [
    "TestVpcVPCGWF1827B84"
   ]
  },
  "TestVpcPublicSubnet1EIP4884338C": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet1"
     }
    ]
   }
  },
  "TestVpcPublicSubnet1NATGatewayA323E3EC": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "TestVpcPublicSubnet1EIP4884338C",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "TestVpcPublicSubnet1SubnetA7DB1EDF"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "TestVpcPublicSubnet1DefaultRoute6C0F0315",
    "TestVpcPublicSubnet1RouteTableAssociation7D1DECD9"
   ]
  },
  "TestVpcPublicSubnet2Subnet80A14523": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPublicSubnet2RouteTable75B88314": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPublicSubnet2RouteTableAssociationB386A819": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestVpcPublicSubnet2RouteTable75B88314"
    },
    "SubnetId": {
     "Ref": "TestVpcPublicSubnet2Subnet80A14523"
    }
   }
  },
  "TestVpcPublicSubnet2DefaultRoute054DAE0A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "TestVpcIGW9DD53F70"
    },
    "RouteTableId": {
     "Ref": "TestVpcPublicSubnet2RouteTable75B88314"
    }
   },
   "DependsOn": [
    "TestVpcVPCGWF1827B84"
   ]
  },
  "TestVpcPublicSubnet2EIP83F7944C": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet2"
     }
    ]
   }
  },
  "TestVpcPublicSubnet2NATGatewayA9858C31": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "TestVpcPublicSubnet2EIP83F7944C",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "TestVpcPublicSubnet2Subnet80A14523"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "TestVpcPublicSubnet2DefaultRoute054DAE0A",
    "TestVpcPublicSubnet2RouteTableAssociationB386A819"
   ]
  },
  "TestVpcPrivateSubnet1SubnetCC65D771": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPrivateSubnet1RouteTable469B0105": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPrivateSubnet1RouteTableAssociationFFD4DFF7": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestVpcPrivateSubnet1RouteTable469B0105"
    },
    "SubnetId": {
     "Ref": "TestVpcPrivateSubnet1SubnetCC65D771"
    }
   }
  },
  "TestVpcPrivateSubnet1DefaultRoute32E7B814": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "TestVpcPublicSubnet1NATGatewayA323E3EC"
    },
    "RouteTableId": {
     "Ref": "TestVpcPrivateSubnet1RouteTable469B0105"
    }
   }
  },
  "TestVpcPrivateSubnet2SubnetDE0C64A2": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPrivateSubnet2RouteTableCEF29F7C": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcPrivateSubnet2RouteTableAssociation18250AB4": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "TestVpcPrivateSubnet2RouteTableCEF29F7C"
    },
    "SubnetId": {
     "Ref": "TestVpcPrivateSubnet2SubnetDE0C64A2"
    }
   }
  },
  "TestVpcPrivateSubnet2DefaultRouteA7EB6930": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "TestVpcPublicSubnet2NATGatewayA9858C31"
    },
    "RouteTableId": {
     "Ref": "TestVpcPrivateSubnet2RouteTableCEF29F7C"
    }
   }
  },
  "TestVpcIGW9DD53F70": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestVpc"
     }
    ]
   }
  },
  "TestVpcVPCGWF1827B84": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "TestVpcIGW9DD53F70"
    },
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestVpcRestrictDefaultSecurityGroupCustomResourceB02B826A": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "TestVpcE77CE678",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "TestVpcE77CE678",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ]
  },
  "TestInstanceInstanceSecurityGroupFC9BD332": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "integ-addCfnInitProxy-stack/TestInstance/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestInstance"
     }
    ],
    "VpcId": {
     "Ref": "TestVpcE77CE678"
    }
   }
  },
  "TestInstanceInstanceRole73B579CC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestInstance"
     }
    ]
   }
  },
  "TestInstanceInstanceRoleDefaultPolicyB37E8251": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "cloudformation:DescribeStackResource",
        "cloudformation:SignalResource"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "AWS::StackId"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TestInstanceInstanceRoleDefaultPolicyB37E8251",
    "Roles": [
     {
      "Ref": "TestInstanceInstanceRole73B579CC"
     }
    ]
   }
  },
  "TestInstanceInstanceProfileD0E25910": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "TestInstanceInstanceRole73B579CC"
     }
    ]
   }
  },
  "TestInstance44016A9E16ad79d8fcd58511": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "IamInstanceProfile": {
     "Ref": "TestInstanceInstanceProfileD0E25910"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "r5.large",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "TestInstanceInstanceSecurityGroupFC9BD332",
       "GroupId"
      ]
     }
    ],
    "SubnetId": {
     "Ref": "TestVpcPrivateSubnet1SubnetCC65D771"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "integ-addCfnInitProxy-stack/TestInstance"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n# fingerprint: 43329d0e32962748\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ",
        {
         "Ref": "AWS::Region"
        },
        " --stack ",
        {
         "Ref": "AWS::StackName"
        },
        " --http-proxy http://",
        {
         "Fn::Join": [
          "",
          [
           "{{resolve:secretsmanager:",
           {
            "Ref": "TestSecret16AF87B1"
           },
           ":SecretString:user::}}:{{resolve:secretsmanager:",
           {
            "Ref": "TestSecret16AF87B1"
           },
           ":SecretString:password::}}@"
          ]
         ]
        },
        "example.com:8080",
        " --resource TestInstance44016A9E16ad79d8fcd58511 -c default\n  /opt/aws/bin/cfn-signal -e 0 --region ",
        {
         "Ref": "AWS::Region"
        },
        " --stack ",
        {
         "Ref": "AWS::StackName"
        },
        " --http-proxy http://",
        {
         "Fn::Join": [
          "",
          [
           "{{resolve:secretsmanager:",
           {
            "Ref": "TestSecret16AF87B1"
           },
           ":SecretString:user::}}:{{resolve:secretsmanager:",
           {
            "Ref": "TestSecret16AF87B1"
           },
           ":SecretString:password::}}@"
          ]
         ]
        },
        "example.com:8080",
        " --resource TestInstance44016A9E16ad79d8fcd58511\n  cat /var/log/cfn-init.log >&2\n)"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "TestInstanceInstanceRoleDefaultPolicyB37E8251",
    "TestInstanceInstanceRole73B579CC"
   ],
   "CreationPolicy": {
    "ResourceSignal": {
     "Count": 1,
     "Timeout": "PT2M"
    }
   },
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "configSets": {
      "default": [
       "config"
      ]
     },
     "config": {
      "packages": {
       "yum": {
        "python3": []
       }
      }
     }
    }
   }
  },
  "TestSecret16AF87B1": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "SecretString": "{\"user\":\"someUser\",\"password\":\"superSecret123\"}"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}